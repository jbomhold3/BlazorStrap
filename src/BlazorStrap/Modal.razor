@inherits ToggleableComponentBase  
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<DynamicElement style="@styles" TagName="div" class="@classname" tabindex="-1" role="dialog" @onclick="@onclick" @onkeydown="@onEscape">
    <div class="@innerClassname" role="document" @ref="Me" tabindex="-2" >
        <div class="modal-content" @onclick="@dontclick">
            @ChildContent
        </div>
    </div>
</DynamicElement>

@if (_isOpen)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    string classname =>
        new CssBuilder("modal")
            .AddClass("fade show", _isOpen)
            .AddClass(Class)
        .Build();

    string innerClassname =>
        new CssBuilder("modal-dialog")
            .AddClass($"modal-{Size.ToDescriptionString()}", Size != Size.None)
            .AddClass( "modal-dialog-centered", IsCentered)
        .Build();

    private ElementRef Me { get; set; }
    protected override async Task OnAfterRenderAsync()
    {
        await new BlazorStrapInterop(JSRuntime).ChangeBody(_isOpen ? "modal-open" : null);
        // Sets Focus inside model so escape key can work.
        if (JustOpened)
        {
            await new BlazorStrapInterop(JSRuntime).FocusElement(Me);
            JustOpened = false;
        }
    }
    
    string styles
    {
        get
        {
            var display = _isOpen ? "display: block; padding-right: 17px;" : null;
            return $"{Style} {display}".Trim();
        }
    }
 
    [Parameter] private bool IsCentered { get; set; }
    [Parameter] private Size Size { get; set; } = Size.None;
    [Parameter] private string Class { get; set; }
    [Parameter] private string Style { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    [Parameter] private bool IgnoreClickOnBackdrop { get; set; }
    [Parameter] private bool IgnoreEscape { get; set; }

    private bool _dontclickWasClicked;
    void onclick()
    {
        if (!IgnoreClickOnBackdrop)
        {
            if (!_dontclickWasClicked) IsOpen = false;
            _dontclickWasClicked = false;
            StateHasChanged();
        }
    }
    private void onEscape(UIKeyboardEventArgs e)
    {
        if (e.Key.ToLower() == "escape" && !IgnoreEscape)
        {
            _isOpen = false;
            IsOpenChanged.InvokeAsync(false);
            StateHasChanged();
        }
    }
    void dontclick(UIMouseEventArgs e)
    {
        _dontclickWasClicked = true;
    }
}