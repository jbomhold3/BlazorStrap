@inherits BootstrapComponentBase
<DynamicElement TagName="@Tag" @onclick="@OnClick" type="@type" class="@classname" disabled="@disabled" role="button" aria-pressed="@pressed" aria-disabled="@disabled" tabindex="@tab" value="@Value" @attributes="UnknownParameters">
    @ChildContent
</DynamicElement>
@code {
    private string classname =>
        new CssBuilder("btn")
            .AddClass($"btn-outline-{Color.ToDescriptionString()}", IsOutline)
            .AddClass($"btn-{Color.ToDescriptionString()}", Color != Color.None && !IsOutline)
            .AddClass($"btn-{Size.ToDescriptionString()}", Size != Size.None)
            .AddClass("btn-block", IsBlock)
            .AddClass("active", ButtonType == ButtonType.Link && IsActive)
            .AddClass("disabled", ButtonType == ButtonType.Link && IsDisabled)
        .Build();

    private string Tag { get; set; } = "button";

    private string pressed => IsActive ? "true" : null;

    private string disabled => IsDisabled ? "true" : null;

    private string tab => IsDisabled ? "-1" : null;

    private string type => ButtonType switch
    {
        ButtonType.Input => "button",
        ButtonType.Button => "button",
        ButtonType.Submit => "submit",
        ButtonType.Reset => "reset",
        _ => null
    };

    [Parameter] private EventCallback<UIMouseEventArgs> OnClick { get; set; }
    [Parameter] private Color Color { get; set; } = Color.Primary;

    private ButtonType _buttonType = ButtonType.Button;
    [Parameter]
    private ButtonType ButtonType
    {
        get => _buttonType;
        set
        {
            _buttonType = value;
            Tag = _buttonType switch
            {
                ButtonType.Button => "button",
                ButtonType.Link => "a",
                ButtonType.Input => "input",
                ButtonType.Submit => "input",
                ButtonType.Reset => "input",
                ButtonType.Radio => "input",
                ButtonType.Checkbox => "input",
                _ => "button"
            };
        }
    }
    [Parameter] private bool IsOutline { get; set; }
    [Parameter] private Size Size { get; set; } = Size.None;
    [Parameter] private bool IsBlock { get; set; }
    [Parameter] private string Value { get; set; }
    [Parameter] private bool IsActive { get; set; }
    [Parameter] private bool IsDisabled { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
}