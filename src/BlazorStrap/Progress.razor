

@if (!IsMulti && !IsBar)
{
    <DynamicElement style="@Style" TagName="div" class="progress">
        <div class="@classname" style="@styles" role="progressbar" aria-valuenow="@Value" aria-valuemin="0" aria-valuemax="@Max">@ChildContent</div>
    </DynamicElement>
}
@if (IsMulti && !IsBar)
{
    <DynamicElement TagName="div" class="@classnameMulti" style="@Style">
        @ChildContent
    </DynamicElement>
}
@if (!IsMulti && IsBar)
{
    <DynamicElement style="@styles" TagName="div" class="@classname" role="progressbar" aria-valuenow="@Value" aria-valuemin="0" aria-valuemax="@Max">
        @ChildContent
    </DynamicElement>
}

@code {
    private string classname =>
        new CssBuilder("progress-bar")
            .AddClass("progress-bar-striped", IsStriped)
            .AddClass("progress-bar-animated", IsAnimated)
            .AddClass($"bg-{Color.ToDescriptionString()}", Color != Color.None)
            .AddClass(Class)
        .Build();

    private string classnameMulti =>
        new CssBuilder("progress")
            .AddClass(Class)
        .Build();

    [Parameter] private int Value { get; set; }
    [Parameter] private int Max { get; set; } = 100;
    string styles
    {
        get
        {
            if (Value == 0) { return null; }
            var percent = Math.Round(((double)Value / (double)Max) * 100);
            return $"width: {percent}%; {Style}".Trim();
        }
    }
    [Parameter] private Color Color { get; set; } = Color.None;
    [Parameter] private bool IsMulti { get; set; }
    [Parameter] private bool IsBar { get; set; }
    [Parameter] private bool IsStriped { get; set; }
    [Parameter] private bool IsAnimated { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private string Style { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
}