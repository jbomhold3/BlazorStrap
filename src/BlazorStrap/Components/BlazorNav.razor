@inherits BootstrapComponentBase

<CascadingValue Value="@DropDownMenuHandler" @attributes="UnknownParameters">
    <DynamicElement TagName="@Tag" class="@classname">
        @ChildContent
    </DynamicElement>
</CascadingValue>
@code {

    private string classname =>
        new CssBuilder("nav")
            .AddClass("navbar-nav", IsNavbar)
            .AddClass("nav-tabs", IsTabs)
            .AddClass("nav-pills", IsPills)
            .AddClass("nav-fill", IsFill)
            .AddClass("flex-column", IsVertical)
            .AddClass(GetAlignment())
            .AddClass(Class)
        .Build();

    private string Tag => IsList ? "ul" : "nav";

    [Parameter] private bool IsList { get; set; }
    [Parameter] private Alignment Alignment { get; set; } = Alignment.None;
    [Parameter] private bool IsVertical { get; set; }
    [Parameter] private bool IsTabs { get; set; }
    [Parameter] private bool IsPills { get; set; }
    [Parameter] private bool IsFill { get; set; }
    [Parameter] private bool IsNavbar { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    private DropDownMenuHandler DropDownMenuHandler { get; set; } = new DropDownMenuHandler();

    private string GetAlignment()
    {
        if (Alignment == Alignment.Center) { return "justify-content-center"; }
        if (Alignment == Alignment.Right) { return "justify-content-end"; }
        return null;
    }

    protected override void OnInit()
    {
        DropDownMenuHandler.OnToggle += OnToggle;
        base.OnInit();
    }
    private void OnToggle(Object Sender, EventArgs e)
    {
        DropDownMenuHandler = DropDownMenuHandler;
        StateHasChanged();
    }

}