@inherits BootstrapComponentBase

<DynamicElement TagName="@Tag" class="@classname" type="@Type" @onclick="@onClickEvent" @attributes="UnknownParameters">
    @ChildContent
</DynamicElement>

@code {
    string classname =>
        new CssBuilder()
            .AddClass("dropdown-divider", IsDivider)
            .AddClass(Class, IsDivider)
            .AddClass("dropdown-item", !IsDivider)
            .AddClass("active", !IsDivider && IsActive)
            .AddClass("disabled", !IsDivider && IsActive)
            .AddClass(Class, !IsDivider)
        .Build();

    string Tag
    {
        get
        {
            if (IsDivider) { return "div"; }
            if (IsButton) { return "button"; }
            else { return "a"; }
        }
    }
    string Type
    {
        get
        {
            if (IsButton) { return "button"; }
            else { return null; }
        }
    }
    [Parameter] private bool IsDivider { get; set; }
    [Parameter] private bool IsDisabled { get; set; }
    [Parameter] private bool IsButton { get; set; }
    [Parameter] private bool IsActive { get; set; }
    [Parameter] private bool StayOpen { get; set; }
    [Parameter] private EventCallback<UIMouseEventArgs> OnClick { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    [CascadingParameter] private DropDownMenuControl DropDownMenuControl { get; set; }

    private void onClickEvent(UIMouseEventArgs e)
    {
        if (OnClick.HasDelegate)
        {
            OnClick.InvokeAsync(e);
        }
        if (!StayOpen)
        {
            if (DropDownMenuControl != null)
                DropDownMenuControl.Handler.Toggle(DropDownMenuControl.Id);
        }
    }

}